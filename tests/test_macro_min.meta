

factorial = n ->
    n == 1 ? 1
           | n * factorial n - 1

    (n > 3) ? "yes" | "no"

factorial = n ->
    n == 1 => 1 | n * factorial n - 1


macro (x::bool code) ? (t::a code) : (f::a code) =
    x => (true -> t | false -> f)





type 'a code = Code of 'a


let code x = x


let unit x = Code x

let bind x f =


return factorial >>= x -> print x

x <- factorial
print x

